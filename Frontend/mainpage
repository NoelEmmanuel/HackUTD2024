import streamlit as st
import pandas as pd
import numpy as np
import time

# Define status emojis
status_emojis = {
    'green': 'ðŸŸ¢',
    'yellow': 'ðŸŸ¡',
    'red': 'ðŸ”´',
}

# Main menu options with their statuses
menu_options = {
    'Home': 'green',
    'Wells': 'yellow',
}

# Wells and their statuses
wells = ['Well A', 'Well B', 'Well C']
wells_status = {
    'Well A': 'green',
    'Well B': 'green',
    'Well C': 'red',
}

def simulate_data():
    new_data = {"Time": time.time(), "Value": np.random.randn()}
    return new_data

# Initialize session state variables
if 'well_data' not in st.session_state:
    st.session_state.well_data = {well: pd.DataFrame(columns=['Time', 'Value']) for well in wells}

if 'run' not in st.session_state:
    st.session_state.run = False

# Create main menu with status emojis
menu_labels = [f"{status_emojis[status]} {name}" for name, status in menu_options.items()]
selected_main = st.sidebar.radio("Main Menu", menu_labels)
selected_main = selected_main.split(' ', 1)[1]  # Remove the emoji to get the actual name

# Handle navigation
if selected_main == 'Home':
    st.write("Welcome to the Home page.")
    if st.button("Start/Stop"):
        st.session_state.run = not st.session_state.run
    for well in wells:
        graph_placeholder = st.empty()
        
    def update_graph(well):
        new_data = simulate_data()
        st.session_state.well_data[well] = pd.concat(
    [st.session_state.well_data[well], pd.DataFrame([new_data])], ignore_index=True)
    st.session_state.well_data[well] = st.session_state.well_data[well].tail(10)
    graph_placeholder.line_chart(st.session_state.well_data[well]['Value'])

    if st.session_state.run:
        for well in wells:
            update_graph(well)
        time.sleep(1)  # Wait for 1 second
        st.rerun()
    else:
        st.write("Click 'Start/Stop' to begin real-time updates.")


elif selected_main == 'Wells':
    # Create wells dropdown with status emojis
    well_labels = [f"{status_emojis[wells_status[well]]} {well}" for well in wells]
    selected_well_label = st.sidebar.selectbox("Select a Well", well_labels)
    selected_well = selected_well_label.split(' ', 1)[1]  # Remove the emoji

    st.write(f"You selected {selected_well}")

    # Start/Stop button
    if st.button('Start/Stop'):
        st.session_state.run = not st.session_state.run

    # Placeholder for the graph
    graph_placeholder = st.empty()

    # Function to update the graph
    def update_graph(well):
        new_data = simulate_data()
        st.session_state.well_data[well] = pd.concat(
    [st.session_state.well_data[well], pd.DataFrame([new_data])], ignore_index=True
)
        # Limit data to last 100 points
        st.session_state.well_data[well] = st.session_state.well_data[well].tail(20)
        # Update the graph
        graph_placeholder.line_chart(st.session_state.well_data[well]['Value'])

    if st.session_state.run:
        update_graph(selected_well)
        time.sleep(1)  # Wait for 1 second
        st.rerun()
    else:
        st.write("Click 'Start/Stop' to begin real-time updates.")
